# https://taskfile.dev

version: '3'

vars:
  BLAZEGRAPH_ENDPOINT: http://blazegraph:8080/blazegraph/sparql
  BLAZEGRAPH_ENDPOINT_SECONDARY: http://blazegraph-secondary:8080/blazegraph/sparql
  GENERATOR_POLICY: /mapping/generator-policy.xml
  MAPPING_BATCH_SIZE: 10
  NAMESPACE: https://data.skkg.ch/

output: 'prefixed'

tasks:

  first-run:
    desc: Task to run when the pipeline is run for the first time
    cmds:
      - task: update-vocabularies

  default:
    desc: Runs the entire pipeline
    cmds:
      - task: download-source-items
      - task: prepare-and-perform-mapping
      - task: ingest-items
      - task: ingest-ontologies

  download-source-items:
    desc: Downloads all item records from MuseumPlus
    deps:
      - download-address-items
      - download-literature-items
      - download-object-items
      - download-person-items
      - download-multimedia-items
  
  download-source-vocabularies:
    desc: Downloads all vocabularies from MuseumPlus
    cmds:
      - for:
          - GenLanguageVgr
          - MulTypeVgr
          - ObjDateCertaintyVgr
          - ObjDatePeriodVgr
          - ObjDatePrefixVgr
          - ObjDateSourceVgr
          - ObjDateSuffixVgr
          - ObjDateTypeVgr
          - ObjIconographyVgr
          - ObjIconographyTypeVgr
          - ObjInscriptionDialogTypeVgr
          - ObjInscriptionTypeVgr
          - ObjInscriptionPositionVgr
          - ObjObjectTitleTypeVgr
          - ObjObjectTitleSourceVgr
          - ObjPerAssociationRoleVgr
          - ObjPerAssociationAttributionVgr
          - PerTypeVgr
        task: _download-vocabulary-from-museumplus
        vars:
          VOCABULARY: "{{.ITEM}}"
          
  download-address-items:
    desc: Download the address item records from MuseumPlus
    cmds:
      - task: _download-module-items-from-museumplus
        vars:
          MODULE: Address

  download-literature-items:
    desc: Download the literature item records from MuseumPlus
    cmds:
      - task: _download-module-items-from-museumplus
        vars:
          MODULE: Literature

  download-object-items:
    desc: Download the object item records from MuseumPlus
    cmds:
      - task: _download-module-items-from-museumplus
        vars:
          MODULE: Object

  download-multimedia-items:
    desc: Download the multimedia item records from MuseumPlus
    cmds:
      - task: _download-module-items-from-museumplus
        vars:
          MODULE: Multimedia

  download-person-items:
    desc: Download the person item records from MuseumPlus
    cmds:
      - task: _download-module-items-from-museumplus
        vars:
          MODULE: Person

  generate-example-record-object:
    desc: Generates an example record for developing the mapping in the X3ML editor
    vars:
      OUTPUTFILE: /mapping/example-object-record.xml
    cmds:
      - task: _generate-example-record
        vars:
          OUTPUTFILE: "{{.OUTPUTFILE}}"
          INPUTFILES: /data/source/object/object-item-2a0c8fab-5771-496c-9350-5482f50c93e2.xml /data/source/object/object-item-0a5b9c6a-2d1d-43c5-b833-6975ddfa7ded.xml /data/source/object/object-item-3c7215d0-3aba-4bb8-98e6-5da239ab0a64.xml /data/source/object/object-item-0b17827d-117b-42b7-9925-0731f6db779b.xml /data/source/object/object-item-0a0c96ab-71f1-466a-a5ff-ab556d437f15.xml /data/source/object/object-item-ffa356cf-f988-4d96-9580-92dcb0e4dddf.xml

  generate-example-record-person:
    desc: Generates an example record for developing the mapping in the X3ML editor
    vars:
      OUTPUTFILE: /mapping/example-person-record.xml
    cmds:
      - task: _generate-example-record
        vars:
          OUTPUTFILE: "{{.OUTPUTFILE}}"
          INPUTFILES: /data/source/person/person-item-1111.xml /data/source/person/person-item-88c3cca8-a587-44b8-8c6d-194dd285b1dd.xml /data/source/person/person-item-0d2611a7-961e-420a-8b04-dc628c3f70fb.xml /data/source/person/person-item-f447a4d2-7be1-4d7c-8dcb-64381b20a9bc.xml

  ingest-items:
    desc: Ingest items for all modules. Add --debug true To see the response from the triplestore
    cmds:
      - task: ingest-object-items
      - task: ingest-person-items

  ingest-object-items:
    desc: Ingests the object items into the triplestore
    cmds:
      - task: _ingest_module_items
        vars:
          MODULE: Object
  
  ingest-ontologies:
    desc: Ingests the ontologies into individual named Graphs
    sources:
      - /mapping/schemas/CIDOC_CRM_7.1.1_RDFS_Impl_v1.1.rdfs
      - /mapping/schemas/CRMdig_v3.2.1.rdfs
      - /mapping/schemas/skkg-ontology.ttl
    cmds:
      - task: _ingest-data-from-file
        vars:
          NAME: CIDOC-CRM
          FILE: /mapping/schemas/CIDOC_CRM_7.1.1_RDFS_Impl_v1.1.rdfs
          TYPE: application/rdf+xml
          GRAPH: http://www.cidoc-crm.org/cidoc-crm/
      - task: _ingest-data-from-file
        vars:
          NAME: CRMdig
          FILE: /mapping/schemas/CRMdig_v3.2.1.rdfs
          TYPE: application/rdf+xml
          GRAPH: http://www.ics.forth.gr/isl/CRMdig/
      - task: _ingest-data-from-file
        vars:
          NAME: SKKG Ontology
          FILE: /mapping/schemas/skkg-ontology.ttl
          TYPE: application/x-turtle
          GRAPH: http://ontology.skkg.ch/ontology/

  ingest-person-items:
    desc: Ingests the person items into the triplestore
    cmds:
      - task: _ingest_module_items
        vars:
          MODULE: Person
    
  ingest-vocabularies:
    - task: _ingest_vocabularies
      vars:
        INPUTFOLDER: /data/ttl/main/vocabularies
        NAMESPACE: https://data.skkg.ch/type/

  prepare-and-perform-mapping:
    desc: Prepares and performs the mapping for all modules
    cmds:
      - task: prepare-mapping-for-object-items
      - task: prepare-mapping-for-person-items
      - task: perform-mapping-for-object-items
      - task: perform-mapping-for-person-items

  perform-mapping-for-object-items:
    desc: Performs the mapping for the object items
    cmds:
      - task: _perform-mapping-for-module-items
        vars:
          MODULE: Object
  
  perform-mapping-for-person-items:
    desc: Performs the mapping for the person items
    cmds:
      - task: _perform-mapping-for-module-items
        vars:
          MODULE: Person

  perform-mapping-for-vocabularies:
    desc: Performs the mapping for the vocabularies
    source:
      - /mapping/mapping-vocabulary.x3ml
      - /data/source/vocabularies/*.xml
    vars:
      SOURCEFOLDER: "/data/source/vocabularies"
      INPUTFOLDER: "/mapping/input/vocabularies"
      OUTPUTFOLDER: "/data/ttl/main/vocabularies"
      MAPPINGFILE: "/mapping/mapping-vocabulary.x3ml"
    cmds:
      - mkdir -p {{.INPUTFOLDER}}
      - mkdir -p {{.OUTPUTFOLDER}}
      - # Copy all XML files from the source folder to the input folder
      - find {{.SOURCEFOLDER}} -maxdepth 1 -name "*.xml" -exec cp -t {{.INPUTFOLDER}} {} +
      - # Remove the string 'xmlns="http://www.zetcom.com/ria/ws/vocabulary"' from the XML files in the input folder as X3ML is not able to handle XML namespaces
      - find {{.INPUTFOLDER}} -maxdepth 1 -name "*.xml" -exec sed -i 's/xmlns="http:\/\/www.zetcom.com\/ria\/ws\/vocabulary"//g' {} +
      - find {{.OUTPUTFOLDER}} -maxdepth 1 -name "*.ttl" -delete
      - bash /scripts/performMapping.sh -i {{.INPUTFOLDER}} -o {{.OUTPUTFOLDER}} -m {{.MAPPINGFILE}} -g {{.GENERATOR_POLICY}} -b {{.MAPPING_BATCH_SIZE}}
  
  prepare-mapping-for-address-items:
    desc: Prepares the mapping for the object items
    cmds:
      - task: _prepare-mapping-for-module-items
        vars:
          MODULE: Address
  
  prepare-mapping-for-object-items:
    desc: Prepares the mapping for the object items
    cmds:
      - task: _prepare-mapping-for-module-items
        vars:
          MODULE: Object

  prepare-mapping-for-person-items:
    desc: Prepares the mapping for the person items
    cmds:
      - task: _prepare-mapping-for-module-items
        vars:
          MODULE: Person

  recreate-folder-metadata:
    desc: Recreate the metadata for a specific folder. The folder name should be passed as an argument.
    cmds:
      - python /scripts/recreateMetadata.py --folder /data/source/{{.CLI_ARGS}}

  remove-deleted-address-items:
    desc: Removes address item records that have been deleted from MuseumPlus
    cmds:
      - task: _remove-deleted-module-items
        vars:
          MODULE: Address

  remove-deleted-literature-items:
    desc: Removes literature item records that have been deleted from MuseumPlus
    cmds:
      - task: _remove-deleted-module-items
        vars:
          MODULE: Literature

  remove-deleted-object-items:
    desc: Removes object item records that have been deleted from MuseumPlus
    cmds:
      - task: _remove-deleted-module-items
        vars:
          MODULE: Object

  remove-deleted-person-items:
    desc: Removes person item records that have been deleted from MuseumPlus
    cmds:
      - task: _remove-deleted-module-items
        vars:
          MODULE: Person

  remove-deleted-source-items:
    desc: Removes item records that have been deleted from MuseumPlus
    deps:
      - remove-deleted-address-items
      - remove-deleted-literature-items
      - remove-deleted-object-items
      - remove-deleted-person-items

  reset:
    prompt: This will delete all artefacts produced by the pipeline... Do you want to continue?
    cmds:
      - echo "Deleting..."
      - rm -rf /data/temp
      - rm -rf /data/ttl/main/address
      - rm -rf /data/ttl/main/object
      - rm -rf /data/ttl/main/person
      - rm -rf /data/ttl/main/vocabularies
      - rm -rf /mapping/input/address
      - rm -rf /mapping/input/object
      - rm -rf /mapping/input/person
      - rm -rf /mapping/input/vocabularies
      - rm -rf /mapping/output/address
      - rm -rf /mapping/output/object
      - rm -rf /mapping/output/person
      - rm -rf /mapping/output/vocabularies
      - rm -f /scripts/.task/checksum/*
      - echo "Resetting metadata.."
      - task: _update-metadata-for-module
        vars:
          MODULE: "object"
          KEY: lastIngested
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: /data/source/object
          FILEEXTENSION: .xml
      - task: _update-metadata-for-module
        vars:
          MODULE: "object"
          KEY: lastMapped
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: /data/source/object
          FILEEXTENSION: .xml
      - task: _update-metadata-for-module
        vars:
          MODULE: "person"
          KEY: lastIngested
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: /data/source/person
          FILEEXTENSION: .xml
      - task: _update-metadata-for-module
        vars:
          MODULE: "person"
          KEY: lastMapped
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: /data/source/person
          FILEEXTENSION: .xml
      - echo "Done!"


  reset-last-ingested-metadata:
    desc: Resets the last ingested metadata for a specific module. The module name should be passed as an argument.
    vars:
      MODULE: "{{.CLI_ARGS}}"
      SOURCEFOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
    cmds:
      - task: _update-metadata-for-module
        vars:
          MODULE: "{{.MODULE}}"
          KEY: lastIngested
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: "{{.SOURCEFOLDER}}"
          FILEEXTENSION: .xml

  reset-last-mapped-metadata:
    desc: Resets the last mapped metadata for a specific module. The module name should be passed as an argument.
    vars:
      MODULE: "{{.CLI_ARGS}}"
      SOURCEFOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
    cmds:
      - task: _update-metadata-for-module
        vars:
          MODULE: "{{.MODULE}}"
          KEY: lastMapped
          VALUE: "1970-01-01 00:00:00.000"
          SOURCEFOLDER: "{{.SOURCEFOLDER}}"
          FILEEXTENSION: .xml
  
  update-vocabularies:
    desc: Downloads, maps, and ingests the vocabularies
    cmds:
      - task: download-source-vocabularies
      - task: perform-mapping-for-vocabularies
      - sleep 5s
      - task: ingest-vocabularies
  
  _download-vocabulary-from-museumplus:
    requires:
      vars: [VOCABULARY]
    vars:
      OUTPUT_FOLDER: /data/source/vocabularies
    cmds:
      - echo "Downloading {{.VOCABULARY}} vocabulary from MuseumPlus"
      - mkdir -p {{.OUTPUT_FOLDER}}
      - python /scripts/downloadVocabulary.py --url $MUSEUMPLUS_URL --username $MUSEUMPLUS_USERNAME --password $MUSEUMPLUS_PASSWORD --vocabulary {{.VOCABULARY}} --outputFolder {{.OUTPUT_FOLDER}}

  _download-module-items-from-museumplus:
    requires:
      vars: [MODULE]
    vars:
      FOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      FILENAMEPREFIX:
        sh: echo "$(echo "{{.MODULE}}" | awk '{print tolower($0)}')-item-"
    cmds:
      - echo "Downloading {{.MODULE}} items from MuseumPlus"
      - mkdir -p {{.FOLDER}}
      - task: _download-items-from-museumplus
        vars:
          MODULE: "{{.MODULE}}"
          OUTPUT_FOLDER: "{{.FOLDER}}"
          FILENAMEPREFIX: "{{.FILENAMEPREFIX}}"

  _download-items-from-museumplus:
    requires:
      vars: [MODULE, OUTPUT_FOLDER, FILENAMEPREFIX]
    vars:
      TEMP_FOLDER: /data/temp/download/temp_{{.MODULE}}
    cmds:
      - mkdir -p {{.TEMP_FOLDER}}
      - python /scripts/downloadItems.py --url $MUSEUMPLUS_URL --username $MUSEUMPLUS_USERNAME --password $MUSEUMPLUS_PASSWORD --module {{.MODULE}} --outputFolder {{.OUTPUT_FOLDER}} --tempFolder {{.TEMP_FOLDER}} --filenamePrefix {{.FILENAMEPREFIX}} {{.CLI_ARGS}}

  _generate-example-record:
    requires:
      vars: [OUTPUTFILE, INPUTFILES]
    vars:
      OUTPUTFILE: "{{.OUTPUTFILE}}"
      INPUTFILES: "{{.INPUTFILES}}"
    cmds:
      - cat {{.INPUTFILES}} > {{.OUTPUTFILE}}
      - sed -i 's/<application xmlns="http:\/\/www.zetcom.com\/ria\/ws\/module">//g' {{.OUTPUTFILE}}
      - sed -i 's/<modules>//g' {{.OUTPUTFILE}}
      - sed -i 's/<\/modules>//g' {{.OUTPUTFILE}}
      - sed -i 's/<\/application>//g' {{.OUTPUTFILE}}
      - echo '<application><modules>' | cat - {{.OUTPUTFILE}} > temp && mv temp {{.OUTPUTFILE}}; echo '</modules></application>' >> {{.OUTPUTFILE}}

  _ingest-data-from-file:
    cmds:
      - echo "Ingest {{.NAME}}"
      - curl -X POST -H 'Content-Type:{{.TYPE}}' --data-binary '@{{.FILE}}' {{.BLAZEGRAPH_ENDPOINT}}{{if .GRAPH}}?context-uri={{.GRAPH}}{{end}}

  _ingest_module_items:
    requires:
      vars: [MODULE, NAMESPACE]
    vars:
      INPUTFOLDER:
        sh: echo "/data/ttl/main/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      TEMPFOLDER:
        sh: echo "/data/temp/ingest/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      XMLFOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      FILENAMEPREFIX:
        sh: echo "$(echo "{{.MODULE}}" | awk '{print tolower($0)}')-item-"
      NAMEDGRAPHBASE: "{{.NAMESPACE}}graph/"
      DEBUG:
        sh: |
          # Your input string of arguments
          args="{{.CLI_ARGS}}"
          # Check if "--debug" is present in the input string
          if [[ "$args" == *"--debug"* ]]; then
            # Use parameter expansion to extract the value after "--debug"
            value="${args#*--debug }"
            # Split the arguments by space and get the first part as the value
            value="${value%% *}"
            echo "$value"
          else
            # "--debug" is not present, echo "false"
            echo "false"
          fi
    cmds:
      - mkdir -p {{.TEMPFOLDER}}
      - |
        # If folder contains already ingested files we skip the preparation step
        if [ "$(find {{.TEMPFOLDER}} -type f -name '*.ttl.ingested' | wc -l)" -gt 0 ]; then
          echo "Skipping preparation step for {{.MODULE}} as there are already ingested files"
        else
          echo "Preparing {{.MODULE}} for ingest"
          python prepareDataForIngest.py  --inputFolder {{.INPUTFOLDER}} --outputFolder {{.TEMPFOLDER}} --xmlFolder {{.XMLFOLDER}}
        fi
      - |
        numfiles=$(find {{.TEMPFOLDER}} -type f -name '*.ttl' | wc -l)
        for f in $(find {{.TEMPFOLDER}} -type f -name '*.ttl' ); do
          identifier=$(basename "$f" | sed "s/{{.FILENAMEPREFIX}}//; s/\\.ttl//")
          graph="{{.NAMEDGRAPHBASE}}{{.FILENAMEPREFIX}}$identifier"
          echo "Ingesting {{.MODULE}} item $count of $numfiles into graph $graph"
          # Drop graph
          curl --silent -X POST {{.BLAZEGRAPH_ENDPOINT}} --data-urlencode "update=DROP GRAPH <$graph>" {{if eq .DEBUG "true"}}{{else}} > /dev/null{{end}}
          # Ingest into graph
          curl --silent -X POST --data-binary "uri=file://$f" "{{.BLAZEGRAPH_ENDPOINT}}?context-uri=$graph" {{if eq .DEBUG "true"}}{{else}} > /dev/null{{end}}
          count=$((count+1)) 
          mv $f $f.ingested
        done
      - task: _update-metadata-for-module
        vars:
          MODULE: "{{.MODULE}}"
          KEY: lastIngested
          VALUE:
            sh: date -u "+%Y-%m-%d %H:%M:%S.000"
          SOURCEFOLDER: "{{.TEMPFOLDER}}"
          FILEEXTENSION: .ttl.ingested
      - find {{.TEMPFOLDER}} -maxdepth 1 -name "*.ttl.ingested" -delete
  
  _ingest_vocabularies:
    requires:
      vars: [INPUTFOLDER, NAMESPACE]
    vars:
      NAMESPACE: "{{.NAMESPACE}}"
    cmds:
      - echo "Ingesting vocabularies"
      - |
        numfiles=$(find {{.INPUTFOLDER}} -type f -name '*.ttl' | wc -l)
        count=1
        for f in $(find {{.INPUTFOLDER}} -type f -name '*.ttl' ); do
          uri=$(grep -oPm 1 '(<{{.NAMESPACE}})[0-9]+>' $f) 
          # Strip < and > at beginning and end of uri
          graph=${uri:1:-1}
          echo -e "Ingesting vocabulary $graph ($count of $numfiles)"
          # Drop graph
          curl --silent -X POST {{.BLAZEGRAPH_ENDPOINT}} --data-urlencode "update=DROP GRAPH <$graph>" > /dev/null
          # Ingest vocabulary into graph
          curl --silent -X POST --data-binary "uri=file://$f" "{{.BLAZEGRAPH_ENDPOINT}}?context-uri=$graph"
          count=$((count+1)) 
        done

  _perform-mapping-for-module-items:
    requires:
      vars: [MODULE]
    vars:
      INPUTFOLDER:
        sh: echo "/mapping/input/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      OUTPUTFOLDER:
        sh: echo "/mapping/output/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      DESTINATIONFOLDER:
        sh: echo "/data/ttl/main/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      MAPPINGFILE:
        sh: echo "/mapping/mapping-$(echo "{{.MODULE}}" | awk '{print tolower($0)}').x3ml"
    cmds:
      - mkdir -p {{.OUTPUTFOLDER}}
      - find {{.OUTPUTFOLDER}} -maxdepth 1 -name "*.ttl" -delete
      - bash /scripts/performMapping.sh -i {{.INPUTFOLDER}} -o {{.OUTPUTFOLDER}} -m {{.MAPPINGFILE}} -g {{.GENERATOR_POLICY}} -b {{.MAPPING_BATCH_SIZE}}
      - sleep 5s # Wait for the mapping to finish
      - task: _update-metadata-for-module
        vars:
          MODULE: "{{.MODULE}}"
          KEY: lastMapped
          VALUE:
            sh: date -u "+%Y-%m-%d %H:%M:%S.000"
          SOURCEFOLDER: "{{.INPUTFOLDER}}"
          FILEEXTENSION: .xml
      - mkdir -p {{.DESTINATIONFOLDER}}
      - find {{.OUTPUTFOLDER}} -maxdepth 1 -name "*.ttl" -exec mv -t {{.DESTINATIONFOLDER}} {} +

  _prepare-mapping-for-module-items:
    requires:
      vars: [MODULE]
    vars:
      MODULE: "{{.MODULE}}"
      INPUTFOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      OUTPUTFOLDER:
        sh: echo "/mapping/input/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
    cmds:
      - # TODO: separate preparation script (e.g. enrichment of data) from mapping preparation (i.e. moving relevant xml files to a place where they should be mapped)
      - mkdir -p {{.OUTPUTFOLDER}}
      - find {{.OUTPUTFOLDER}} -maxdepth 1 -name "*.xml" -delete
      - python /scripts/prepareDataForMapping.py --module {{.MODULE}} --inputFolder {{.INPUTFOLDER}} --outputFolder {{.OUTPUTFOLDER}} {{.CLI_ARGS}}

  _process-items-deleted-from-museumplus:
    cmds:
      - python /scripts/processDeletedItems.py --url $MUSEUMPLUS_URL --username $MUSEUMPLUS_USERNAME --password $MUSEUMPLUS_PASSWORD --module {{.MODULE}} --inputFolder {{.INPUT_FOLDER}} --filenamePrefix {{.FILENAMEPREFIX}}

  _remove-deleted-module-items:
    requires:
      vars: [MODULE]
    vars:
      FOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      FILENAMEPREFIX:
        sh: echo "$(echo "{{.MODULE}}" | awk '{print tolower($0)}')-item-"
    cmds:
      - echo "Checking for deleted items in {{.MODULE}}"
      - task: _process-items-deleted-from-museumplus
        vars:
          MODULE: "{{.MODULE}}"
          INPUT_FOLDER: "{{.FOLDER}}"
          FILENAMEPREFIX: "{{.FILENAMEPREFIX}}"

  _update-metadata-for-module:
    requires:
      vars: [MODULE, KEY, VALUE, SOURCEFOLDER, FILEEXTENSION]
    vars:
      METADATAFOLDER:
        sh: echo "/data/source/$(echo "{{.MODULE}}" | awk '{print tolower($0)}')"
      SOURCEFOLDER: "{{.SOURCEFOLDER}}"
      KEY: "{{.KEY}}"
      VALUE: "{{.VALUE}}"
      FILEEXTENSION: "{{.FILEEXTENSION}}"
    cmds:
      - python /scripts/updateMetadataValueForFiles.py --metadataFolder {{.METADATAFOLDER}} --inputFolder {{.SOURCEFOLDER}} --key {{.KEY}} --value "{{.VALUE}}" --fileExtension {{.FILEEXTENSION}}